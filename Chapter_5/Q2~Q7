#include <cstring>
#include <iostream>
using namespace std;

void half(double& n){
  n=n/2;
}

int main() {
  double n=20;
  half(n);
  cout<<n;
  return 0;
}

____________________________________________
#include <cstring>
#include <iostream>
using namespace std;

void combine(string &a, string& b, string &c){
  c=a+" "+b;
}

int main() {
  string text1("I love you"), text2("very much");
  string text3;
  combine(text1, text2, text3);
  cout<<text3;
  return 0;
}
_____________________________
#include <cstring>
#include <iostream>
using namespace std;

bool bigger(int a, int b, int &big){
  if(a==b)
    return true;
  else if(a>b){
    big=a;
    return false;
  }
  else{
    big=b;
    return false;
  }
    
}

int main() {
  int a, b, big;
  cin>>a>>b;
  bigger(a,b,big);
  return 0;
}
________________________________
#include <cstring>
#include <iostream>
using namespace std;

class Circle{
  int radius;
public:
  Circle(int r){this->radius=r;}
  int getRadius(){return this->radius;}
  void setRadius(int r){this->radius=r;}
  void show(){cout<<"반지름이 "<<radius<<"인 원"<<endl;}
};

void increaseBy(Circle &a, Circle b){
    int r=a.getRadius()+b.getRadius();
    a.setRadius(r);
}

int main() {
  Circle x(10), y(5);
  increaseBy(x,y);
  x.show();
  return 0;
}
______________________________
#include <cstring>
#include <iostream>
using namespace std;

char& find(char a[], char c, bool& success){
  int i=0;
  while(a!=" "){
    if(a[i]==c){
      success=true;
      return a[i];
    }
    i++;
  }
  
}

int main() {
  char s[]="Mike";
  bool b=false;
  char& loc=find(s,'M',b);
  if(b==false){
    cout<<"M을 발견할 수 없다"<<endl;
    return 0;
  }
  loc='m';
  cout<<s<<endl;
  return 0;
}
____________________________
#include <cstring>
#include <iostream>
using namespace std;

class MyIntStack{
  int p[10];
  int tos;
public:
  MyIntStack(){tos=0;}
  bool push(int n){
    if(tos>9)
      return false;
    else{
    p[tos++]=n;
    return true;}
  }
  bool pop(int &n){
    tos--;
    if(tos<0)
      return false;
    else{
      n=p[tos];
      return true;
    }
  }
};

int main() {
  MyIntStack a;
  for(int i=0;i<11;i++){
    if(a.push(i)) cout<<i<<' ';
    else cout<<endl<<i+1<<" 번째 stack full"<<endl;
  }
  int n;
  for(int i=0;i<11; i++){
    if(a.pop(n)) cout<<n<<' ';
    else cout<<endl<<i+1<<"번째 stack empty";
  }
  cout<<endl;
  return 0;
}
__________________
